stages:
  - cppcheck
  - unit_tests
  - evals

# -----------------------------
# Stage 1: MISRA check with cppcheck
# -----------------------------
cppcheck:
  stage: cppcheck
  image: gcc:13
  script:
    - apt-get update && apt-get install -y cppcheck
    # Run MISRA check (using compile_commands.json if available)
    - cppcheck --project=build/compile_commands.json --enable=misra --inline-suppr --error-exitcode=1
  artifacts:
    when: always
    paths:
      - cppcheck.xml
  allow_failure: false

# -----------------------------
# Stage 2: Unit tests + coverage gate
# -----------------------------
unit_tests:
  stage: unit_tests
  image: gcc:13
  script:
    - apt-get update && apt-get install -y lcov cmake make
    - cmake -B build -S . -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON
    - cmake --build build
    # Run Unity/CTest test suite
    - ctest --test-dir build --output-on-failure
    # Collect coverage
    - lcov --capture --directory build --output-file coverage.info
    - lcov --summary coverage.info
    # Gate at 95%
    - COVERAGE=$(lcov --summary coverage.info | awk '/lines/{print $2}' | tr -d '%')
    - echo "Coverage: $COVERAGE%"
    - if [ "${COVERAGE%.*}" -lt 95 ]; then echo "Coverage below 95%!"; exit 1; fi
  artifacts:
    when: always
    paths:
      - coverage.info
      - build/Testing/Temporary/LastTest.log
  allow_failure: false

# -----------------------------
# Stage 3: Scenario evals
# -----------------------------
evals:
  stage: evals
  image: gcc:13
  script:
    - apt-get update && apt-get install -y python3 jq cmake make
    - cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
    - cmake --build build
    # Run only eval-labeled tests
    - ctest --test-dir build --output-on-failure -R eval_autobrake_ped_close
    # Gate with thresholds
    - python3 eval/check_evals.py
  artifacts:
    when: always
    paths:
      - eval/reports/
  allow_failure: false
